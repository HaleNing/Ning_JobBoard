// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/HaleNing/Ning_JobBoard/src/Model/ent/job"
)

// JobCreate is the builder for creating a Job entity.
type JobCreate struct {
	config
	mutation *JobMutation
	hooks    []Hook
}

// SetJobName sets the "job_name" field.
func (jc *JobCreate) SetJobName(s string) *JobCreate {
	jc.mutation.SetJobName(s)
	return jc
}

// SetCompanyName sets the "company_name" field.
func (jc *JobCreate) SetCompanyName(s string) *JobCreate {
	jc.mutation.SetCompanyName(s)
	return jc
}

// SetIsExist sets the "is_exist" field.
func (jc *JobCreate) SetIsExist(b bool) *JobCreate {
	jc.mutation.SetIsExist(b)
	return jc
}

// SetNillableIsExist sets the "is_exist" field if the given value is not nil.
func (jc *JobCreate) SetNillableIsExist(b *bool) *JobCreate {
	if b != nil {
		jc.SetIsExist(*b)
	}
	return jc
}

// SetDescription sets the "description" field.
func (jc *JobCreate) SetDescription(s string) *JobCreate {
	jc.mutation.SetDescription(s)
	return jc
}

// SetIsRemote sets the "is_remote" field.
func (jc *JobCreate) SetIsRemote(b bool) *JobCreate {
	jc.mutation.SetIsRemote(b)
	return jc
}

// SetExp sets the "exp" field.
func (jc *JobCreate) SetExp(i int8) *JobCreate {
	jc.mutation.SetExp(i)
	return jc
}

// SetArea sets the "area" field.
func (jc *JobCreate) SetArea(s string) *JobCreate {
	jc.mutation.SetArea(s)
	return jc
}

// SetCreateTime sets the "create_time" field.
func (jc *JobCreate) SetCreateTime(t time.Time) *JobCreate {
	jc.mutation.SetCreateTime(t)
	return jc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (jc *JobCreate) SetNillableCreateTime(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetCreateTime(*t)
	}
	return jc
}

// SetUpdateTime sets the "update_time" field.
func (jc *JobCreate) SetUpdateTime(t time.Time) *JobCreate {
	jc.mutation.SetUpdateTime(t)
	return jc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (jc *JobCreate) SetNillableUpdateTime(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetUpdateTime(*t)
	}
	return jc
}

// Mutation returns the JobMutation object of the builder.
func (jc *JobCreate) Mutation() *JobMutation {
	return jc.mutation
}

// Save creates the Job in the database.
func (jc *JobCreate) Save(ctx context.Context) (*Job, error) {
	var (
		err  error
		node *Job
	)
	jc.defaults()
	if len(jc.hooks) == 0 {
		if err = jc.check(); err != nil {
			return nil, err
		}
		node, err = jc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = jc.check(); err != nil {
				return nil, err
			}
			jc.mutation = mutation
			if node, err = jc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(jc.hooks) - 1; i >= 0; i-- {
			if jc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = jc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, jc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Job)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from JobMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (jc *JobCreate) SaveX(ctx context.Context) *Job {
	v, err := jc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jc *JobCreate) Exec(ctx context.Context) error {
	_, err := jc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jc *JobCreate) ExecX(ctx context.Context) {
	if err := jc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jc *JobCreate) defaults() {
	if _, ok := jc.mutation.IsExist(); !ok {
		v := job.DefaultIsExist
		jc.mutation.SetIsExist(v)
	}
	if _, ok := jc.mutation.CreateTime(); !ok {
		v := job.DefaultCreateTime
		jc.mutation.SetCreateTime(v)
	}
	if _, ok := jc.mutation.UpdateTime(); !ok {
		v := job.DefaultUpdateTime()
		jc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jc *JobCreate) check() error {
	if _, ok := jc.mutation.JobName(); !ok {
		return &ValidationError{Name: "job_name", err: errors.New(`ent: missing required field "Job.job_name"`)}
	}
	if v, ok := jc.mutation.JobName(); ok {
		if err := job.JobNameValidator(v); err != nil {
			return &ValidationError{Name: "job_name", err: fmt.Errorf(`ent: validator failed for field "Job.job_name": %w`, err)}
		}
	}
	if _, ok := jc.mutation.CompanyName(); !ok {
		return &ValidationError{Name: "company_name", err: errors.New(`ent: missing required field "Job.company_name"`)}
	}
	if v, ok := jc.mutation.CompanyName(); ok {
		if err := job.CompanyNameValidator(v); err != nil {
			return &ValidationError{Name: "company_name", err: fmt.Errorf(`ent: validator failed for field "Job.company_name": %w`, err)}
		}
	}
	if _, ok := jc.mutation.IsExist(); !ok {
		return &ValidationError{Name: "is_exist", err: errors.New(`ent: missing required field "Job.is_exist"`)}
	}
	if _, ok := jc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Job.description"`)}
	}
	if v, ok := jc.mutation.Description(); ok {
		if err := job.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Job.description": %w`, err)}
		}
	}
	if _, ok := jc.mutation.IsRemote(); !ok {
		return &ValidationError{Name: "is_remote", err: errors.New(`ent: missing required field "Job.is_remote"`)}
	}
	if _, ok := jc.mutation.Exp(); !ok {
		return &ValidationError{Name: "exp", err: errors.New(`ent: missing required field "Job.exp"`)}
	}
	if v, ok := jc.mutation.Exp(); ok {
		if err := job.ExpValidator(v); err != nil {
			return &ValidationError{Name: "exp", err: fmt.Errorf(`ent: validator failed for field "Job.exp": %w`, err)}
		}
	}
	if _, ok := jc.mutation.Area(); !ok {
		return &ValidationError{Name: "area", err: errors.New(`ent: missing required field "Job.area"`)}
	}
	if v, ok := jc.mutation.Area(); ok {
		if err := job.AreaValidator(v); err != nil {
			return &ValidationError{Name: "area", err: fmt.Errorf(`ent: validator failed for field "Job.area": %w`, err)}
		}
	}
	if _, ok := jc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Job.create_time"`)}
	}
	if _, ok := jc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Job.update_time"`)}
	}
	return nil
}

func (jc *JobCreate) sqlSave(ctx context.Context) (*Job, error) {
	_node, _spec := jc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (jc *JobCreate) createSpec() (*Job, *sqlgraph.CreateSpec) {
	var (
		_node = &Job{config: jc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: job.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: job.FieldID,
			},
		}
	)
	if value, ok := jc.mutation.JobName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldJobName,
		})
		_node.JobName = value
	}
	if value, ok := jc.mutation.CompanyName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldCompanyName,
		})
		_node.CompanyName = value
	}
	if value, ok := jc.mutation.IsExist(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: job.FieldIsExist,
		})
		_node.IsExist = value
	}
	if value, ok := jc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := jc.mutation.IsRemote(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: job.FieldIsRemote,
		})
		_node.IsRemote = value
	}
	if value, ok := jc.mutation.Exp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: job.FieldExp,
		})
		_node.Exp = value
	}
	if value, ok := jc.mutation.Area(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldArea,
		})
		_node.Area = value
	}
	if value, ok := jc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: job.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := jc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: job.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	return _node, _spec
}

// JobCreateBulk is the builder for creating many Job entities in bulk.
type JobCreateBulk struct {
	config
	builders []*JobCreate
}

// Save creates the Job entities in the database.
func (jcb *JobCreateBulk) Save(ctx context.Context) ([]*Job, error) {
	specs := make([]*sqlgraph.CreateSpec, len(jcb.builders))
	nodes := make([]*Job, len(jcb.builders))
	mutators := make([]Mutator, len(jcb.builders))
	for i := range jcb.builders {
		func(i int, root context.Context) {
			builder := jcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jcb *JobCreateBulk) SaveX(ctx context.Context) []*Job {
	v, err := jcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jcb *JobCreateBulk) Exec(ctx context.Context) error {
	_, err := jcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jcb *JobCreateBulk) ExecX(ctx context.Context) {
	if err := jcb.Exec(ctx); err != nil {
		panic(err)
	}
}
