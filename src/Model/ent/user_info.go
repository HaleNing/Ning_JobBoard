// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/HaleNing/Ning_JobBoard/src/Model/ent/user_info"
)

// User_info is the model entity for the User_info schema.
type User_info struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// user_name
	UserName string `json:"user_name,omitempty"`
	// salt will with passwd hash to result
	Salt string `json:"salt,omitempty"`
	// passwd hash res
	PasswdHash string `json:"passwd_hash,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User_info) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user_info.FieldID:
			values[i] = new(sql.NullInt64)
		case user_info.FieldUserName, user_info.FieldSalt, user_info.FieldPasswdHash:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User_info", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User_info fields.
func (ui *User_info) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user_info.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ui.ID = int(value.Int64)
		case user_info.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_name", values[i])
			} else if value.Valid {
				ui.UserName = value.String
			}
		case user_info.FieldSalt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field salt", values[i])
			} else if value.Valid {
				ui.Salt = value.String
			}
		case user_info.FieldPasswdHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field passwd_hash", values[i])
			} else if value.Valid {
				ui.PasswdHash = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this User_info.
// Note that you need to call User_info.Unwrap() before calling this method if this User_info
// was returned from a transaction, and the transaction was committed or rolled back.
func (ui *User_info) Update() *UserInfoUpdateOne {
	return (&User_infoClient{config: ui.config}).UpdateOne(ui)
}

// Unwrap unwraps the User_info entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ui *User_info) Unwrap() *User_info {
	_tx, ok := ui.config.driver.(*txDriver)
	if !ok {
		panic("ent: User_info is not a transactional entity")
	}
	ui.config.driver = _tx.drv
	return ui
}

// String implements the fmt.Stringer.
func (ui *User_info) String() string {
	var builder strings.Builder
	builder.WriteString("User_info(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ui.ID))
	builder.WriteString("user_name=")
	builder.WriteString(ui.UserName)
	builder.WriteString(", ")
	builder.WriteString("salt=")
	builder.WriteString(ui.Salt)
	builder.WriteString(", ")
	builder.WriteString("passwd_hash=")
	builder.WriteString(ui.PasswdHash)
	builder.WriteByte(')')
	return builder.String()
}

// User_infos is a parsable slice of User_info.
type User_infos []*User_info

func (ui User_infos) config(cfg config) {
	for _i := range ui {
		ui[_i].config = cfg
	}
}
