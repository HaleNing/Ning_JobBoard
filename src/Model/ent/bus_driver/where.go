// Code generated by ent, DO NOT EDIT.

package bus_driver

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/HaleNing/bustrack/src/Model/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UserName applies equality check predicate on the "user_name" field. It's identical to UserNameEQ.
func UserName(v string) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// IsDelete applies equality check predicate on the "is_delete" field. It's identical to IsDeleteEQ.
func IsDelete(v int8) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDelete), v))
	})
}

// UserAge applies equality check predicate on the "user_age" field. It's identical to UserAgeEQ.
func UserAge(v int8) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserAge), v))
	})
}

// Sex applies equality check predicate on the "sex" field. It's identical to SexEQ.
func Sex(v bool) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSex), v))
	})
}

// CareerAge applies equality check predicate on the "career_age" field. It's identical to CareerAgeEQ.
func CareerAge(v int8) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCareerAge), v))
	})
}

// UserNameEQ applies the EQ predicate on the "user_name" field.
func UserNameEQ(v string) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// UserNameNEQ applies the NEQ predicate on the "user_name" field.
func UserNameNEQ(v string) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserName), v))
	})
}

// UserNameIn applies the In predicate on the "user_name" field.
func UserNameIn(vs ...string) predicate.Bus_driver {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bus_driver(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserName), v...))
	})
}

// UserNameNotIn applies the NotIn predicate on the "user_name" field.
func UserNameNotIn(vs ...string) predicate.Bus_driver {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bus_driver(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserName), v...))
	})
}

// UserNameGT applies the GT predicate on the "user_name" field.
func UserNameGT(v string) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserName), v))
	})
}

// UserNameGTE applies the GTE predicate on the "user_name" field.
func UserNameGTE(v string) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserName), v))
	})
}

// UserNameLT applies the LT predicate on the "user_name" field.
func UserNameLT(v string) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserName), v))
	})
}

// UserNameLTE applies the LTE predicate on the "user_name" field.
func UserNameLTE(v string) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserName), v))
	})
}

// UserNameContains applies the Contains predicate on the "user_name" field.
func UserNameContains(v string) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserName), v))
	})
}

// UserNameHasPrefix applies the HasPrefix predicate on the "user_name" field.
func UserNameHasPrefix(v string) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserName), v))
	})
}

// UserNameHasSuffix applies the HasSuffix predicate on the "user_name" field.
func UserNameHasSuffix(v string) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserName), v))
	})
}

// UserNameEqualFold applies the EqualFold predicate on the "user_name" field.
func UserNameEqualFold(v string) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserName), v))
	})
}

// UserNameContainsFold applies the ContainsFold predicate on the "user_name" field.
func UserNameContainsFold(v string) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserName), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Bus_driver {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bus_driver(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Bus_driver {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bus_driver(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Bus_driver {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bus_driver(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Bus_driver {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bus_driver(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// IsDeleteEQ applies the EQ predicate on the "is_delete" field.
func IsDeleteEQ(v int8) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDelete), v))
	})
}

// IsDeleteNEQ applies the NEQ predicate on the "is_delete" field.
func IsDeleteNEQ(v int8) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDelete), v))
	})
}

// IsDeleteIn applies the In predicate on the "is_delete" field.
func IsDeleteIn(vs ...int8) predicate.Bus_driver {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bus_driver(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsDelete), v...))
	})
}

// IsDeleteNotIn applies the NotIn predicate on the "is_delete" field.
func IsDeleteNotIn(vs ...int8) predicate.Bus_driver {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bus_driver(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsDelete), v...))
	})
}

// IsDeleteGT applies the GT predicate on the "is_delete" field.
func IsDeleteGT(v int8) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDelete), v))
	})
}

// IsDeleteGTE applies the GTE predicate on the "is_delete" field.
func IsDeleteGTE(v int8) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDelete), v))
	})
}

// IsDeleteLT applies the LT predicate on the "is_delete" field.
func IsDeleteLT(v int8) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDelete), v))
	})
}

// IsDeleteLTE applies the LTE predicate on the "is_delete" field.
func IsDeleteLTE(v int8) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDelete), v))
	})
}

// UserAgeEQ applies the EQ predicate on the "user_age" field.
func UserAgeEQ(v int8) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserAge), v))
	})
}

// UserAgeNEQ applies the NEQ predicate on the "user_age" field.
func UserAgeNEQ(v int8) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserAge), v))
	})
}

// UserAgeIn applies the In predicate on the "user_age" field.
func UserAgeIn(vs ...int8) predicate.Bus_driver {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bus_driver(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserAge), v...))
	})
}

// UserAgeNotIn applies the NotIn predicate on the "user_age" field.
func UserAgeNotIn(vs ...int8) predicate.Bus_driver {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bus_driver(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserAge), v...))
	})
}

// UserAgeGT applies the GT predicate on the "user_age" field.
func UserAgeGT(v int8) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserAge), v))
	})
}

// UserAgeGTE applies the GTE predicate on the "user_age" field.
func UserAgeGTE(v int8) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserAge), v))
	})
}

// UserAgeLT applies the LT predicate on the "user_age" field.
func UserAgeLT(v int8) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserAge), v))
	})
}

// UserAgeLTE applies the LTE predicate on the "user_age" field.
func UserAgeLTE(v int8) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserAge), v))
	})
}

// SexEQ applies the EQ predicate on the "sex" field.
func SexEQ(v bool) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSex), v))
	})
}

// SexNEQ applies the NEQ predicate on the "sex" field.
func SexNEQ(v bool) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSex), v))
	})
}

// CareerAgeEQ applies the EQ predicate on the "career_age" field.
func CareerAgeEQ(v int8) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCareerAge), v))
	})
}

// CareerAgeNEQ applies the NEQ predicate on the "career_age" field.
func CareerAgeNEQ(v int8) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCareerAge), v))
	})
}

// CareerAgeIn applies the In predicate on the "career_age" field.
func CareerAgeIn(vs ...int8) predicate.Bus_driver {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bus_driver(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCareerAge), v...))
	})
}

// CareerAgeNotIn applies the NotIn predicate on the "career_age" field.
func CareerAgeNotIn(vs ...int8) predicate.Bus_driver {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bus_driver(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCareerAge), v...))
	})
}

// CareerAgeGT applies the GT predicate on the "career_age" field.
func CareerAgeGT(v int8) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCareerAge), v))
	})
}

// CareerAgeGTE applies the GTE predicate on the "career_age" field.
func CareerAgeGTE(v int8) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCareerAge), v))
	})
}

// CareerAgeLT applies the LT predicate on the "career_age" field.
func CareerAgeLT(v int8) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCareerAge), v))
	})
}

// CareerAgeLTE applies the LTE predicate on the "career_age" field.
func CareerAgeLTE(v int8) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCareerAge), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Bus_driver) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Bus_driver) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bus_driver) predicate.Bus_driver {
	return predicate.Bus_driver(func(s *sql.Selector) {
		p(s.Not())
	})
}
