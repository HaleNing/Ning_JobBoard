// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/HaleNing/bustrack/src/Model/ent/bus_driver"
)

// Bus_driver is the model entity for the Bus_driver schema.
type Bus_driver struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// user name
	UserName string `json:"user_name,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 0-无效，1-有效
	IsDelete int8 `json:"is_delete,omitempty"`
	// 年龄
	UserAge int8 `json:"user_age,omitempty"`
	// 性别
	Sex bool `json:"sex,omitempty"`
	// 驾龄
	CareerAge int8 `json:"career_age,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bus_driver) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case bus_driver.FieldSex:
			values[i] = new(sql.NullBool)
		case bus_driver.FieldID, bus_driver.FieldIsDelete, bus_driver.FieldUserAge, bus_driver.FieldCareerAge:
			values[i] = new(sql.NullInt64)
		case bus_driver.FieldUserName:
			values[i] = new(sql.NullString)
		case bus_driver.FieldCreateTime, bus_driver.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Bus_driver", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bus_driver fields.
func (bd *Bus_driver) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bus_driver.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bd.ID = int64(value.Int64)
		case bus_driver.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_name", values[i])
			} else if value.Valid {
				bd.UserName = value.String
			}
		case bus_driver.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				bd.CreateTime = value.Time
			}
		case bus_driver.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				bd.UpdateTime = value.Time
			}
		case bus_driver.FieldIsDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_delete", values[i])
			} else if value.Valid {
				bd.IsDelete = int8(value.Int64)
			}
		case bus_driver.FieldUserAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_age", values[i])
			} else if value.Valid {
				bd.UserAge = int8(value.Int64)
			}
		case bus_driver.FieldSex:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field sex", values[i])
			} else if value.Valid {
				bd.Sex = value.Bool
			}
		case bus_driver.FieldCareerAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field career_age", values[i])
			} else if value.Valid {
				bd.CareerAge = int8(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Bus_driver.
// Note that you need to call Bus_driver.Unwrap() before calling this method if this Bus_driver
// was returned from a transaction, and the transaction was committed or rolled back.
func (bd *Bus_driver) Update() *BusDriverUpdateOne {
	return (&Bus_driverClient{config: bd.config}).UpdateOne(bd)
}

// Unwrap unwraps the Bus_driver entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bd *Bus_driver) Unwrap() *Bus_driver {
	_tx, ok := bd.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bus_driver is not a transactional entity")
	}
	bd.config.driver = _tx.drv
	return bd
}

// String implements the fmt.Stringer.
func (bd *Bus_driver) String() string {
	var builder strings.Builder
	builder.WriteString("Bus_driver(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bd.ID))
	builder.WriteString("user_name=")
	builder.WriteString(bd.UserName)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(bd.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(bd.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_delete=")
	builder.WriteString(fmt.Sprintf("%v", bd.IsDelete))
	builder.WriteString(", ")
	builder.WriteString("user_age=")
	builder.WriteString(fmt.Sprintf("%v", bd.UserAge))
	builder.WriteString(", ")
	builder.WriteString("sex=")
	builder.WriteString(fmt.Sprintf("%v", bd.Sex))
	builder.WriteString(", ")
	builder.WriteString("career_age=")
	builder.WriteString(fmt.Sprintf("%v", bd.CareerAge))
	builder.WriteByte(')')
	return builder.String()
}

// Bus_drivers is a parsable slice of Bus_driver.
type Bus_drivers []*Bus_driver

func (bd Bus_drivers) config(cfg config) {
	for _i := range bd {
		bd[_i].config = cfg
	}
}
