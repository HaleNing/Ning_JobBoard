// Code generated by ent, DO NOT EDIT.

package user_info

import (
	"entgo.io/ent/dialect/sql"
	"github.com/HaleNing/Ning_JobBoard/src/Model/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UserName applies equality check predicate on the "user_name" field. It's identical to UserNameEQ.
func UserName(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// Salt applies equality check predicate on the "salt" field. It's identical to SaltEQ.
func Salt(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSalt), v))
	})
}

// PasswdHash applies equality check predicate on the "passwd_hash" field. It's identical to PasswdHashEQ.
func PasswdHash(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPasswdHash), v))
	})
}

// UserNameEQ applies the EQ predicate on the "user_name" field.
func UserNameEQ(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// UserNameNEQ applies the NEQ predicate on the "user_name" field.
func UserNameNEQ(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserName), v))
	})
}

// UserNameIn applies the In predicate on the "user_name" field.
func UserNameIn(vs ...string) predicate.User_info {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserName), v...))
	})
}

// UserNameNotIn applies the NotIn predicate on the "user_name" field.
func UserNameNotIn(vs ...string) predicate.User_info {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserName), v...))
	})
}

// UserNameGT applies the GT predicate on the "user_name" field.
func UserNameGT(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserName), v))
	})
}

// UserNameGTE applies the GTE predicate on the "user_name" field.
func UserNameGTE(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserName), v))
	})
}

// UserNameLT applies the LT predicate on the "user_name" field.
func UserNameLT(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserName), v))
	})
}

// UserNameLTE applies the LTE predicate on the "user_name" field.
func UserNameLTE(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserName), v))
	})
}

// UserNameContains applies the Contains predicate on the "user_name" field.
func UserNameContains(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserName), v))
	})
}

// UserNameHasPrefix applies the HasPrefix predicate on the "user_name" field.
func UserNameHasPrefix(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserName), v))
	})
}

// UserNameHasSuffix applies the HasSuffix predicate on the "user_name" field.
func UserNameHasSuffix(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserName), v))
	})
}

// UserNameEqualFold applies the EqualFold predicate on the "user_name" field.
func UserNameEqualFold(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserName), v))
	})
}

// UserNameContainsFold applies the ContainsFold predicate on the "user_name" field.
func UserNameContainsFold(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserName), v))
	})
}

// SaltEQ applies the EQ predicate on the "salt" field.
func SaltEQ(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSalt), v))
	})
}

// SaltNEQ applies the NEQ predicate on the "salt" field.
func SaltNEQ(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSalt), v))
	})
}

// SaltIn applies the In predicate on the "salt" field.
func SaltIn(vs ...string) predicate.User_info {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSalt), v...))
	})
}

// SaltNotIn applies the NotIn predicate on the "salt" field.
func SaltNotIn(vs ...string) predicate.User_info {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSalt), v...))
	})
}

// SaltGT applies the GT predicate on the "salt" field.
func SaltGT(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSalt), v))
	})
}

// SaltGTE applies the GTE predicate on the "salt" field.
func SaltGTE(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSalt), v))
	})
}

// SaltLT applies the LT predicate on the "salt" field.
func SaltLT(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSalt), v))
	})
}

// SaltLTE applies the LTE predicate on the "salt" field.
func SaltLTE(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSalt), v))
	})
}

// SaltContains applies the Contains predicate on the "salt" field.
func SaltContains(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSalt), v))
	})
}

// SaltHasPrefix applies the HasPrefix predicate on the "salt" field.
func SaltHasPrefix(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSalt), v))
	})
}

// SaltHasSuffix applies the HasSuffix predicate on the "salt" field.
func SaltHasSuffix(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSalt), v))
	})
}

// SaltEqualFold applies the EqualFold predicate on the "salt" field.
func SaltEqualFold(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSalt), v))
	})
}

// SaltContainsFold applies the ContainsFold predicate on the "salt" field.
func SaltContainsFold(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSalt), v))
	})
}

// PasswdHashEQ applies the EQ predicate on the "passwd_hash" field.
func PasswdHashEQ(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPasswdHash), v))
	})
}

// PasswdHashNEQ applies the NEQ predicate on the "passwd_hash" field.
func PasswdHashNEQ(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPasswdHash), v))
	})
}

// PasswdHashIn applies the In predicate on the "passwd_hash" field.
func PasswdHashIn(vs ...string) predicate.User_info {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPasswdHash), v...))
	})
}

// PasswdHashNotIn applies the NotIn predicate on the "passwd_hash" field.
func PasswdHashNotIn(vs ...string) predicate.User_info {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPasswdHash), v...))
	})
}

// PasswdHashGT applies the GT predicate on the "passwd_hash" field.
func PasswdHashGT(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPasswdHash), v))
	})
}

// PasswdHashGTE applies the GTE predicate on the "passwd_hash" field.
func PasswdHashGTE(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPasswdHash), v))
	})
}

// PasswdHashLT applies the LT predicate on the "passwd_hash" field.
func PasswdHashLT(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPasswdHash), v))
	})
}

// PasswdHashLTE applies the LTE predicate on the "passwd_hash" field.
func PasswdHashLTE(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPasswdHash), v))
	})
}

// PasswdHashContains applies the Contains predicate on the "passwd_hash" field.
func PasswdHashContains(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPasswdHash), v))
	})
}

// PasswdHashHasPrefix applies the HasPrefix predicate on the "passwd_hash" field.
func PasswdHashHasPrefix(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPasswdHash), v))
	})
}

// PasswdHashHasSuffix applies the HasSuffix predicate on the "passwd_hash" field.
func PasswdHashHasSuffix(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPasswdHash), v))
	})
}

// PasswdHashEqualFold applies the EqualFold predicate on the "passwd_hash" field.
func PasswdHashEqualFold(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPasswdHash), v))
	})
}

// PasswdHashContainsFold applies the ContainsFold predicate on the "passwd_hash" field.
func PasswdHashContainsFold(v string) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPasswdHash), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User_info) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User_info) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User_info) predicate.User_info {
	return predicate.User_info(func(s *sql.Selector) {
		p(s.Not())
	})
}
