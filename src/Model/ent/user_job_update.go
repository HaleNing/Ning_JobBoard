// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/HaleNing/Ning_JobBoard/src/Model/ent/predicate"
	"github.com/HaleNing/Ning_JobBoard/src/Model/ent/user_job"
)

// UserJobUpdate is the builder for updating User_job entities.
type UserJobUpdate struct {
	config
	hooks    []Hook
	mutation *UserJobMutation
}

// Where appends a list predicates to the UserJobUpdate builder.
func (uju *UserJobUpdate) Where(ps ...predicate.User_job) *UserJobUpdate {
	uju.mutation.Where(ps...)
	return uju
}

// SetJobID sets the "job_id" field.
func (uju *UserJobUpdate) SetJobID(i int64) *UserJobUpdate {
	uju.mutation.ResetJobID()
	uju.mutation.SetJobID(i)
	return uju
}

// AddJobID adds i to the "job_id" field.
func (uju *UserJobUpdate) AddJobID(i int64) *UserJobUpdate {
	uju.mutation.AddJobID(i)
	return uju
}

// SetUserID sets the "user_id" field.
func (uju *UserJobUpdate) SetUserID(i int64) *UserJobUpdate {
	uju.mutation.ResetUserID()
	uju.mutation.SetUserID(i)
	return uju
}

// AddUserID adds i to the "user_id" field.
func (uju *UserJobUpdate) AddUserID(i int64) *UserJobUpdate {
	uju.mutation.AddUserID(i)
	return uju
}

// SetCreateTime sets the "create_time" field.
func (uju *UserJobUpdate) SetCreateTime(t time.Time) *UserJobUpdate {
	uju.mutation.SetCreateTime(t)
	return uju
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (uju *UserJobUpdate) SetNillableCreateTime(t *time.Time) *UserJobUpdate {
	if t != nil {
		uju.SetCreateTime(*t)
	}
	return uju
}

// SetUpdateTime sets the "update_time" field.
func (uju *UserJobUpdate) SetUpdateTime(t time.Time) *UserJobUpdate {
	uju.mutation.SetUpdateTime(t)
	return uju
}

// Mutation returns the UserJobMutation object of the builder.
func (uju *UserJobUpdate) Mutation() *UserJobMutation {
	return uju.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uju *UserJobUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	uju.defaults()
	if len(uju.hooks) == 0 {
		if err = uju.check(); err != nil {
			return 0, err
		}
		affected, err = uju.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserJobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uju.check(); err != nil {
				return 0, err
			}
			uju.mutation = mutation
			affected, err = uju.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uju.hooks) - 1; i >= 0; i-- {
			if uju.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uju.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uju.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uju *UserJobUpdate) SaveX(ctx context.Context) int {
	affected, err := uju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uju *UserJobUpdate) Exec(ctx context.Context) error {
	_, err := uju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uju *UserJobUpdate) ExecX(ctx context.Context) {
	if err := uju.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uju *UserJobUpdate) defaults() {
	if _, ok := uju.mutation.UpdateTime(); !ok {
		v := user_job.UpdateDefaultUpdateTime()
		uju.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uju *UserJobUpdate) check() error {
	if v, ok := uju.mutation.JobID(); ok {
		if err := user_job.JobIDValidator(v); err != nil {
			return &ValidationError{Name: "job_id", err: fmt.Errorf(`ent: validator failed for field "User_job.job_id": %w`, err)}
		}
	}
	if v, ok := uju.mutation.UserID(); ok {
		if err := user_job.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "User_job.user_id": %w`, err)}
		}
	}
	return nil
}

func (uju *UserJobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user_job.Table,
			Columns: user_job.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user_job.FieldID,
			},
		},
	}
	if ps := uju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uju.mutation.JobID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user_job.FieldJobID,
		})
	}
	if value, ok := uju.mutation.AddedJobID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user_job.FieldJobID,
		})
	}
	if value, ok := uju.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user_job.FieldUserID,
		})
	}
	if value, ok := uju.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user_job.FieldUserID,
		})
	}
	if value, ok := uju.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user_job.FieldCreateTime,
		})
	}
	if value, ok := uju.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user_job.FieldUpdateTime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user_job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserJobUpdateOne is the builder for updating a single User_job entity.
type UserJobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserJobMutation
}

// SetJobID sets the "job_id" field.
func (ujuo *UserJobUpdateOne) SetJobID(i int64) *UserJobUpdateOne {
	ujuo.mutation.ResetJobID()
	ujuo.mutation.SetJobID(i)
	return ujuo
}

// AddJobID adds i to the "job_id" field.
func (ujuo *UserJobUpdateOne) AddJobID(i int64) *UserJobUpdateOne {
	ujuo.mutation.AddJobID(i)
	return ujuo
}

// SetUserID sets the "user_id" field.
func (ujuo *UserJobUpdateOne) SetUserID(i int64) *UserJobUpdateOne {
	ujuo.mutation.ResetUserID()
	ujuo.mutation.SetUserID(i)
	return ujuo
}

// AddUserID adds i to the "user_id" field.
func (ujuo *UserJobUpdateOne) AddUserID(i int64) *UserJobUpdateOne {
	ujuo.mutation.AddUserID(i)
	return ujuo
}

// SetCreateTime sets the "create_time" field.
func (ujuo *UserJobUpdateOne) SetCreateTime(t time.Time) *UserJobUpdateOne {
	ujuo.mutation.SetCreateTime(t)
	return ujuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ujuo *UserJobUpdateOne) SetNillableCreateTime(t *time.Time) *UserJobUpdateOne {
	if t != nil {
		ujuo.SetCreateTime(*t)
	}
	return ujuo
}

// SetUpdateTime sets the "update_time" field.
func (ujuo *UserJobUpdateOne) SetUpdateTime(t time.Time) *UserJobUpdateOne {
	ujuo.mutation.SetUpdateTime(t)
	return ujuo
}

// Mutation returns the UserJobMutation object of the builder.
func (ujuo *UserJobUpdateOne) Mutation() *UserJobMutation {
	return ujuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ujuo *UserJobUpdateOne) Select(field string, fields ...string) *UserJobUpdateOne {
	ujuo.fields = append([]string{field}, fields...)
	return ujuo
}

// Save executes the query and returns the updated User_job entity.
func (ujuo *UserJobUpdateOne) Save(ctx context.Context) (*User_job, error) {
	var (
		err  error
		node *User_job
	)
	ujuo.defaults()
	if len(ujuo.hooks) == 0 {
		if err = ujuo.check(); err != nil {
			return nil, err
		}
		node, err = ujuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserJobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ujuo.check(); err != nil {
				return nil, err
			}
			ujuo.mutation = mutation
			node, err = ujuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ujuo.hooks) - 1; i >= 0; i-- {
			if ujuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ujuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ujuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*User_job)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserJobMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ujuo *UserJobUpdateOne) SaveX(ctx context.Context) *User_job {
	node, err := ujuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ujuo *UserJobUpdateOne) Exec(ctx context.Context) error {
	_, err := ujuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ujuo *UserJobUpdateOne) ExecX(ctx context.Context) {
	if err := ujuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ujuo *UserJobUpdateOne) defaults() {
	if _, ok := ujuo.mutation.UpdateTime(); !ok {
		v := user_job.UpdateDefaultUpdateTime()
		ujuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ujuo *UserJobUpdateOne) check() error {
	if v, ok := ujuo.mutation.JobID(); ok {
		if err := user_job.JobIDValidator(v); err != nil {
			return &ValidationError{Name: "job_id", err: fmt.Errorf(`ent: validator failed for field "User_job.job_id": %w`, err)}
		}
	}
	if v, ok := ujuo.mutation.UserID(); ok {
		if err := user_job.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "User_job.user_id": %w`, err)}
		}
	}
	return nil
}

func (ujuo *UserJobUpdateOne) sqlSave(ctx context.Context) (_node *User_job, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user_job.Table,
			Columns: user_job.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user_job.FieldID,
			},
		},
	}
	id, ok := ujuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User_job.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ujuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user_job.FieldID)
		for _, f := range fields {
			if !user_job.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user_job.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ujuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ujuo.mutation.JobID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user_job.FieldJobID,
		})
	}
	if value, ok := ujuo.mutation.AddedJobID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user_job.FieldJobID,
		})
	}
	if value, ok := ujuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user_job.FieldUserID,
		})
	}
	if value, ok := ujuo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user_job.FieldUserID,
		})
	}
	if value, ok := ujuo.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user_job.FieldCreateTime,
		})
	}
	if value, ok := ujuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user_job.FieldUpdateTime,
		})
	}
	_node = &User_job{config: ujuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ujuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user_job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
