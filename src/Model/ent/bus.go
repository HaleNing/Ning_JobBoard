// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/HaleNing/bustrack/src/Model/ent/bus"
)

// Bus is the model entity for the Bus schema.
type Bus struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// bus name
	BusName string `json:"bus_name,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 用户id
	UserID int64 `json:"user_id,omitempty"`
	// 0-无效，1-有效
	IsDelete int8 `json:"is_delete,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bus) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case bus.FieldID, bus.FieldUserID, bus.FieldIsDelete:
			values[i] = new(sql.NullInt64)
		case bus.FieldBusName:
			values[i] = new(sql.NullString)
		case bus.FieldCreateTime, bus.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Bus", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bus fields.
func (b *Bus) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bus.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int64(value.Int64)
		case bus.FieldBusName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bus_name", values[i])
			} else if value.Valid {
				b.BusName = value.String
			}
		case bus.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				b.CreateTime = value.Time
			}
		case bus.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				b.UpdateTime = value.Time
			}
		case bus.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				b.UserID = value.Int64
			}
		case bus.FieldIsDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_delete", values[i])
			} else if value.Valid {
				b.IsDelete = int8(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Bus.
// Note that you need to call Bus.Unwrap() before calling this method if this Bus
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bus) Update() *BusUpdateOne {
	return (&BusClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Bus entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bus) Unwrap() *Bus {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bus is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bus) String() string {
	var builder strings.Builder
	builder.WriteString("Bus(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("bus_name=")
	builder.WriteString(b.BusName)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(b.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(b.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", b.UserID))
	builder.WriteString(", ")
	builder.WriteString("is_delete=")
	builder.WriteString(fmt.Sprintf("%v", b.IsDelete))
	builder.WriteByte(')')
	return builder.String()
}

// BusSlice is a parsable slice of Bus.
type BusSlice []*Bus

func (b BusSlice) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
