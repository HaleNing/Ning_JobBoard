// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/HaleNing/bustrack/src/Model/ent/bus"
	"github.com/HaleNing/bustrack/src/Model/ent/predicate"
)

// BusUpdate is the builder for updating Bus entities.
type BusUpdate struct {
	config
	hooks    []Hook
	mutation *BusMutation
}

// Where appends a list predicates to the BusUpdate builder.
func (bu *BusUpdate) Where(ps ...predicate.Bus) *BusUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetBusName sets the "bus_name" field.
func (bu *BusUpdate) SetBusName(s string) *BusUpdate {
	bu.mutation.SetBusName(s)
	return bu
}

// SetCreateTime sets the "create_time" field.
func (bu *BusUpdate) SetCreateTime(t time.Time) *BusUpdate {
	bu.mutation.SetCreateTime(t)
	return bu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (bu *BusUpdate) SetNillableCreateTime(t *time.Time) *BusUpdate {
	if t != nil {
		bu.SetCreateTime(*t)
	}
	return bu
}

// SetUpdateTime sets the "update_time" field.
func (bu *BusUpdate) SetUpdateTime(t time.Time) *BusUpdate {
	bu.mutation.SetUpdateTime(t)
	return bu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (bu *BusUpdate) SetNillableUpdateTime(t *time.Time) *BusUpdate {
	if t != nil {
		bu.SetUpdateTime(*t)
	}
	return bu
}

// SetUserID sets the "user_id" field.
func (bu *BusUpdate) SetUserID(i int64) *BusUpdate {
	bu.mutation.ResetUserID()
	bu.mutation.SetUserID(i)
	return bu
}

// AddUserID adds i to the "user_id" field.
func (bu *BusUpdate) AddUserID(i int64) *BusUpdate {
	bu.mutation.AddUserID(i)
	return bu
}

// SetIsDelete sets the "is_delete" field.
func (bu *BusUpdate) SetIsDelete(i int8) *BusUpdate {
	bu.mutation.ResetIsDelete()
	bu.mutation.SetIsDelete(i)
	return bu
}

// SetNillableIsDelete sets the "is_delete" field if the given value is not nil.
func (bu *BusUpdate) SetNillableIsDelete(i *int8) *BusUpdate {
	if i != nil {
		bu.SetIsDelete(*i)
	}
	return bu
}

// AddIsDelete adds i to the "is_delete" field.
func (bu *BusUpdate) AddIsDelete(i int8) *BusUpdate {
	bu.mutation.AddIsDelete(i)
	return bu
}

// Mutation returns the BusMutation object of the builder.
func (bu *BusUpdate) Mutation() *BusMutation {
	return bu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BusUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		if err = bu.check(); err != nil {
			return 0, err
		}
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bu.check(); err != nil {
				return 0, err
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			if bu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BusUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BusUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BusUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BusUpdate) check() error {
	if v, ok := bu.mutation.BusName(); ok {
		if err := bus.BusNameValidator(v); err != nil {
			return &ValidationError{Name: "bus_name", err: fmt.Errorf(`ent: validator failed for field "Bus.bus_name": %w`, err)}
		}
	}
	return nil
}

func (bu *BusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bus.Table,
			Columns: bus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: bus.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.BusName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bus.FieldBusName,
		})
	}
	if value, ok := bu.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bus.FieldCreateTime,
		})
	}
	if value, ok := bu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bus.FieldUpdateTime,
		})
	}
	if value, ok := bu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bus.FieldUserID,
		})
	}
	if value, ok := bu.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bus.FieldUserID,
		})
	}
	if value, ok := bu.mutation.IsDelete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: bus.FieldIsDelete,
		})
	}
	if value, ok := bu.mutation.AddedIsDelete(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: bus.FieldIsDelete,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// BusUpdateOne is the builder for updating a single Bus entity.
type BusUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BusMutation
}

// SetBusName sets the "bus_name" field.
func (buo *BusUpdateOne) SetBusName(s string) *BusUpdateOne {
	buo.mutation.SetBusName(s)
	return buo
}

// SetCreateTime sets the "create_time" field.
func (buo *BusUpdateOne) SetCreateTime(t time.Time) *BusUpdateOne {
	buo.mutation.SetCreateTime(t)
	return buo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (buo *BusUpdateOne) SetNillableCreateTime(t *time.Time) *BusUpdateOne {
	if t != nil {
		buo.SetCreateTime(*t)
	}
	return buo
}

// SetUpdateTime sets the "update_time" field.
func (buo *BusUpdateOne) SetUpdateTime(t time.Time) *BusUpdateOne {
	buo.mutation.SetUpdateTime(t)
	return buo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (buo *BusUpdateOne) SetNillableUpdateTime(t *time.Time) *BusUpdateOne {
	if t != nil {
		buo.SetUpdateTime(*t)
	}
	return buo
}

// SetUserID sets the "user_id" field.
func (buo *BusUpdateOne) SetUserID(i int64) *BusUpdateOne {
	buo.mutation.ResetUserID()
	buo.mutation.SetUserID(i)
	return buo
}

// AddUserID adds i to the "user_id" field.
func (buo *BusUpdateOne) AddUserID(i int64) *BusUpdateOne {
	buo.mutation.AddUserID(i)
	return buo
}

// SetIsDelete sets the "is_delete" field.
func (buo *BusUpdateOne) SetIsDelete(i int8) *BusUpdateOne {
	buo.mutation.ResetIsDelete()
	buo.mutation.SetIsDelete(i)
	return buo
}

// SetNillableIsDelete sets the "is_delete" field if the given value is not nil.
func (buo *BusUpdateOne) SetNillableIsDelete(i *int8) *BusUpdateOne {
	if i != nil {
		buo.SetIsDelete(*i)
	}
	return buo
}

// AddIsDelete adds i to the "is_delete" field.
func (buo *BusUpdateOne) AddIsDelete(i int8) *BusUpdateOne {
	buo.mutation.AddIsDelete(i)
	return buo
}

// Mutation returns the BusMutation object of the builder.
func (buo *BusUpdateOne) Mutation() *BusMutation {
	return buo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BusUpdateOne) Select(field string, fields ...string) *BusUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bus entity.
func (buo *BusUpdateOne) Save(ctx context.Context) (*Bus, error) {
	var (
		err  error
		node *Bus
	)
	if len(buo.hooks) == 0 {
		if err = buo.check(); err != nil {
			return nil, err
		}
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = buo.check(); err != nil {
				return nil, err
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			if buo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, buo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Bus)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BusMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BusUpdateOne) SaveX(ctx context.Context) *Bus {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BusUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BusUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BusUpdateOne) check() error {
	if v, ok := buo.mutation.BusName(); ok {
		if err := bus.BusNameValidator(v); err != nil {
			return &ValidationError{Name: "bus_name", err: fmt.Errorf(`ent: validator failed for field "Bus.bus_name": %w`, err)}
		}
	}
	return nil
}

func (buo *BusUpdateOne) sqlSave(ctx context.Context) (_node *Bus, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bus.Table,
			Columns: bus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: bus.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Bus.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bus.FieldID)
		for _, f := range fields {
			if !bus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.BusName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bus.FieldBusName,
		})
	}
	if value, ok := buo.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bus.FieldCreateTime,
		})
	}
	if value, ok := buo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bus.FieldUpdateTime,
		})
	}
	if value, ok := buo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bus.FieldUserID,
		})
	}
	if value, ok := buo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bus.FieldUserID,
		})
	}
	if value, ok := buo.mutation.IsDelete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: bus.FieldIsDelete,
		})
	}
	if value, ok := buo.mutation.AddedIsDelete(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: bus.FieldIsDelete,
		})
	}
	_node = &Bus{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
