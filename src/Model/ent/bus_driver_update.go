// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/HaleNing/bustrack/src/Model/ent/bus_driver"
	"github.com/HaleNing/bustrack/src/Model/ent/predicate"
)

// BusDriverUpdate is the builder for updating Bus_driver entities.
type BusDriverUpdate struct {
	config
	hooks    []Hook
	mutation *BusDriverMutation
}

// Where appends a list predicates to the BusDriverUpdate builder.
func (bdu *BusDriverUpdate) Where(ps ...predicate.Bus_driver) *BusDriverUpdate {
	bdu.mutation.Where(ps...)
	return bdu
}

// SetUserName sets the "user_name" field.
func (bdu *BusDriverUpdate) SetUserName(s string) *BusDriverUpdate {
	bdu.mutation.SetUserName(s)
	return bdu
}

// SetCreateTime sets the "create_time" field.
func (bdu *BusDriverUpdate) SetCreateTime(t time.Time) *BusDriverUpdate {
	bdu.mutation.SetCreateTime(t)
	return bdu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (bdu *BusDriverUpdate) SetNillableCreateTime(t *time.Time) *BusDriverUpdate {
	if t != nil {
		bdu.SetCreateTime(*t)
	}
	return bdu
}

// SetUpdateTime sets the "update_time" field.
func (bdu *BusDriverUpdate) SetUpdateTime(t time.Time) *BusDriverUpdate {
	bdu.mutation.SetUpdateTime(t)
	return bdu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (bdu *BusDriverUpdate) SetNillableUpdateTime(t *time.Time) *BusDriverUpdate {
	if t != nil {
		bdu.SetUpdateTime(*t)
	}
	return bdu
}

// SetIsDelete sets the "is_delete" field.
func (bdu *BusDriverUpdate) SetIsDelete(i int8) *BusDriverUpdate {
	bdu.mutation.ResetIsDelete()
	bdu.mutation.SetIsDelete(i)
	return bdu
}

// SetNillableIsDelete sets the "is_delete" field if the given value is not nil.
func (bdu *BusDriverUpdate) SetNillableIsDelete(i *int8) *BusDriverUpdate {
	if i != nil {
		bdu.SetIsDelete(*i)
	}
	return bdu
}

// AddIsDelete adds i to the "is_delete" field.
func (bdu *BusDriverUpdate) AddIsDelete(i int8) *BusDriverUpdate {
	bdu.mutation.AddIsDelete(i)
	return bdu
}

// SetUserAge sets the "user_age" field.
func (bdu *BusDriverUpdate) SetUserAge(i int8) *BusDriverUpdate {
	bdu.mutation.ResetUserAge()
	bdu.mutation.SetUserAge(i)
	return bdu
}

// AddUserAge adds i to the "user_age" field.
func (bdu *BusDriverUpdate) AddUserAge(i int8) *BusDriverUpdate {
	bdu.mutation.AddUserAge(i)
	return bdu
}

// SetSex sets the "sex" field.
func (bdu *BusDriverUpdate) SetSex(b bool) *BusDriverUpdate {
	bdu.mutation.SetSex(b)
	return bdu
}

// SetCareerAge sets the "career_age" field.
func (bdu *BusDriverUpdate) SetCareerAge(i int8) *BusDriverUpdate {
	bdu.mutation.ResetCareerAge()
	bdu.mutation.SetCareerAge(i)
	return bdu
}

// AddCareerAge adds i to the "career_age" field.
func (bdu *BusDriverUpdate) AddCareerAge(i int8) *BusDriverUpdate {
	bdu.mutation.AddCareerAge(i)
	return bdu
}

// Mutation returns the BusDriverMutation object of the builder.
func (bdu *BusDriverUpdate) Mutation() *BusDriverMutation {
	return bdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bdu *BusDriverUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bdu.hooks) == 0 {
		if err = bdu.check(); err != nil {
			return 0, err
		}
		affected, err = bdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BusDriverMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bdu.check(); err != nil {
				return 0, err
			}
			bdu.mutation = mutation
			affected, err = bdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bdu.hooks) - 1; i >= 0; i-- {
			if bdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bdu *BusDriverUpdate) SaveX(ctx context.Context) int {
	affected, err := bdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bdu *BusDriverUpdate) Exec(ctx context.Context) error {
	_, err := bdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bdu *BusDriverUpdate) ExecX(ctx context.Context) {
	if err := bdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bdu *BusDriverUpdate) check() error {
	if v, ok := bdu.mutation.UserName(); ok {
		if err := bus_driver.UserNameValidator(v); err != nil {
			return &ValidationError{Name: "user_name", err: fmt.Errorf(`ent: validator failed for field "Bus_driver.user_name": %w`, err)}
		}
	}
	if v, ok := bdu.mutation.UserAge(); ok {
		if err := bus_driver.UserAgeValidator(v); err != nil {
			return &ValidationError{Name: "user_age", err: fmt.Errorf(`ent: validator failed for field "Bus_driver.user_age": %w`, err)}
		}
	}
	if v, ok := bdu.mutation.CareerAge(); ok {
		if err := bus_driver.CareerAgeValidator(v); err != nil {
			return &ValidationError{Name: "career_age", err: fmt.Errorf(`ent: validator failed for field "Bus_driver.career_age": %w`, err)}
		}
	}
	return nil
}

func (bdu *BusDriverUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bus_driver.Table,
			Columns: bus_driver.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: bus_driver.FieldID,
			},
		},
	}
	if ps := bdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bdu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bus_driver.FieldUserName,
		})
	}
	if value, ok := bdu.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bus_driver.FieldCreateTime,
		})
	}
	if value, ok := bdu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bus_driver.FieldUpdateTime,
		})
	}
	if value, ok := bdu.mutation.IsDelete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: bus_driver.FieldIsDelete,
		})
	}
	if value, ok := bdu.mutation.AddedIsDelete(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: bus_driver.FieldIsDelete,
		})
	}
	if value, ok := bdu.mutation.UserAge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: bus_driver.FieldUserAge,
		})
	}
	if value, ok := bdu.mutation.AddedUserAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: bus_driver.FieldUserAge,
		})
	}
	if value, ok := bdu.mutation.Sex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: bus_driver.FieldSex,
		})
	}
	if value, ok := bdu.mutation.CareerAge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: bus_driver.FieldCareerAge,
		})
	}
	if value, ok := bdu.mutation.AddedCareerAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: bus_driver.FieldCareerAge,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bus_driver.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// BusDriverUpdateOne is the builder for updating a single Bus_driver entity.
type BusDriverUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BusDriverMutation
}

// SetUserName sets the "user_name" field.
func (bduo *BusDriverUpdateOne) SetUserName(s string) *BusDriverUpdateOne {
	bduo.mutation.SetUserName(s)
	return bduo
}

// SetCreateTime sets the "create_time" field.
func (bduo *BusDriverUpdateOne) SetCreateTime(t time.Time) *BusDriverUpdateOne {
	bduo.mutation.SetCreateTime(t)
	return bduo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (bduo *BusDriverUpdateOne) SetNillableCreateTime(t *time.Time) *BusDriverUpdateOne {
	if t != nil {
		bduo.SetCreateTime(*t)
	}
	return bduo
}

// SetUpdateTime sets the "update_time" field.
func (bduo *BusDriverUpdateOne) SetUpdateTime(t time.Time) *BusDriverUpdateOne {
	bduo.mutation.SetUpdateTime(t)
	return bduo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (bduo *BusDriverUpdateOne) SetNillableUpdateTime(t *time.Time) *BusDriverUpdateOne {
	if t != nil {
		bduo.SetUpdateTime(*t)
	}
	return bduo
}

// SetIsDelete sets the "is_delete" field.
func (bduo *BusDriverUpdateOne) SetIsDelete(i int8) *BusDriverUpdateOne {
	bduo.mutation.ResetIsDelete()
	bduo.mutation.SetIsDelete(i)
	return bduo
}

// SetNillableIsDelete sets the "is_delete" field if the given value is not nil.
func (bduo *BusDriverUpdateOne) SetNillableIsDelete(i *int8) *BusDriverUpdateOne {
	if i != nil {
		bduo.SetIsDelete(*i)
	}
	return bduo
}

// AddIsDelete adds i to the "is_delete" field.
func (bduo *BusDriverUpdateOne) AddIsDelete(i int8) *BusDriverUpdateOne {
	bduo.mutation.AddIsDelete(i)
	return bduo
}

// SetUserAge sets the "user_age" field.
func (bduo *BusDriverUpdateOne) SetUserAge(i int8) *BusDriverUpdateOne {
	bduo.mutation.ResetUserAge()
	bduo.mutation.SetUserAge(i)
	return bduo
}

// AddUserAge adds i to the "user_age" field.
func (bduo *BusDriverUpdateOne) AddUserAge(i int8) *BusDriverUpdateOne {
	bduo.mutation.AddUserAge(i)
	return bduo
}

// SetSex sets the "sex" field.
func (bduo *BusDriverUpdateOne) SetSex(b bool) *BusDriverUpdateOne {
	bduo.mutation.SetSex(b)
	return bduo
}

// SetCareerAge sets the "career_age" field.
func (bduo *BusDriverUpdateOne) SetCareerAge(i int8) *BusDriverUpdateOne {
	bduo.mutation.ResetCareerAge()
	bduo.mutation.SetCareerAge(i)
	return bduo
}

// AddCareerAge adds i to the "career_age" field.
func (bduo *BusDriverUpdateOne) AddCareerAge(i int8) *BusDriverUpdateOne {
	bduo.mutation.AddCareerAge(i)
	return bduo
}

// Mutation returns the BusDriverMutation object of the builder.
func (bduo *BusDriverUpdateOne) Mutation() *BusDriverMutation {
	return bduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bduo *BusDriverUpdateOne) Select(field string, fields ...string) *BusDriverUpdateOne {
	bduo.fields = append([]string{field}, fields...)
	return bduo
}

// Save executes the query and returns the updated Bus_driver entity.
func (bduo *BusDriverUpdateOne) Save(ctx context.Context) (*Bus_driver, error) {
	var (
		err  error
		node *Bus_driver
	)
	if len(bduo.hooks) == 0 {
		if err = bduo.check(); err != nil {
			return nil, err
		}
		node, err = bduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BusDriverMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bduo.check(); err != nil {
				return nil, err
			}
			bduo.mutation = mutation
			node, err = bduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bduo.hooks) - 1; i >= 0; i-- {
			if bduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bduo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, bduo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Bus_driver)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BusDriverMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (bduo *BusDriverUpdateOne) SaveX(ctx context.Context) *Bus_driver {
	node, err := bduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bduo *BusDriverUpdateOne) Exec(ctx context.Context) error {
	_, err := bduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bduo *BusDriverUpdateOne) ExecX(ctx context.Context) {
	if err := bduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bduo *BusDriverUpdateOne) check() error {
	if v, ok := bduo.mutation.UserName(); ok {
		if err := bus_driver.UserNameValidator(v); err != nil {
			return &ValidationError{Name: "user_name", err: fmt.Errorf(`ent: validator failed for field "Bus_driver.user_name": %w`, err)}
		}
	}
	if v, ok := bduo.mutation.UserAge(); ok {
		if err := bus_driver.UserAgeValidator(v); err != nil {
			return &ValidationError{Name: "user_age", err: fmt.Errorf(`ent: validator failed for field "Bus_driver.user_age": %w`, err)}
		}
	}
	if v, ok := bduo.mutation.CareerAge(); ok {
		if err := bus_driver.CareerAgeValidator(v); err != nil {
			return &ValidationError{Name: "career_age", err: fmt.Errorf(`ent: validator failed for field "Bus_driver.career_age": %w`, err)}
		}
	}
	return nil
}

func (bduo *BusDriverUpdateOne) sqlSave(ctx context.Context) (_node *Bus_driver, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bus_driver.Table,
			Columns: bus_driver.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: bus_driver.FieldID,
			},
		},
	}
	id, ok := bduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Bus_driver.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bus_driver.FieldID)
		for _, f := range fields {
			if !bus_driver.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bus_driver.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bduo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bus_driver.FieldUserName,
		})
	}
	if value, ok := bduo.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bus_driver.FieldCreateTime,
		})
	}
	if value, ok := bduo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bus_driver.FieldUpdateTime,
		})
	}
	if value, ok := bduo.mutation.IsDelete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: bus_driver.FieldIsDelete,
		})
	}
	if value, ok := bduo.mutation.AddedIsDelete(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: bus_driver.FieldIsDelete,
		})
	}
	if value, ok := bduo.mutation.UserAge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: bus_driver.FieldUserAge,
		})
	}
	if value, ok := bduo.mutation.AddedUserAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: bus_driver.FieldUserAge,
		})
	}
	if value, ok := bduo.mutation.Sex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: bus_driver.FieldSex,
		})
	}
	if value, ok := bduo.mutation.CareerAge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: bus_driver.FieldCareerAge,
		})
	}
	if value, ok := bduo.mutation.AddedCareerAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: bus_driver.FieldCareerAge,
		})
	}
	_node = &Bus_driver{config: bduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bus_driver.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
