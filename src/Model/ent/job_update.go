// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/HaleNing/Ning_JobBoard/src/Model/ent/job"
	"github.com/HaleNing/Ning_JobBoard/src/Model/ent/predicate"
)

// JobUpdate is the builder for updating Job entities.
type JobUpdate struct {
	config
	hooks    []Hook
	mutation *JobMutation
}

// Where appends a list predicates to the JobUpdate builder.
func (ju *JobUpdate) Where(ps ...predicate.Job) *JobUpdate {
	ju.mutation.Where(ps...)
	return ju
}

// SetJobName sets the "job_name" field.
func (ju *JobUpdate) SetJobName(s string) *JobUpdate {
	ju.mutation.SetJobName(s)
	return ju
}

// SetCompanyName sets the "company_name" field.
func (ju *JobUpdate) SetCompanyName(s string) *JobUpdate {
	ju.mutation.SetCompanyName(s)
	return ju
}

// SetIsExist sets the "is_exist" field.
func (ju *JobUpdate) SetIsExist(b bool) *JobUpdate {
	ju.mutation.SetIsExist(b)
	return ju
}

// SetNillableIsExist sets the "is_exist" field if the given value is not nil.
func (ju *JobUpdate) SetNillableIsExist(b *bool) *JobUpdate {
	if b != nil {
		ju.SetIsExist(*b)
	}
	return ju
}

// SetDescription sets the "description" field.
func (ju *JobUpdate) SetDescription(s string) *JobUpdate {
	ju.mutation.SetDescription(s)
	return ju
}

// SetIsRemote sets the "is_remote" field.
func (ju *JobUpdate) SetIsRemote(b bool) *JobUpdate {
	ju.mutation.SetIsRemote(b)
	return ju
}

// SetExp sets the "exp" field.
func (ju *JobUpdate) SetExp(i int8) *JobUpdate {
	ju.mutation.ResetExp()
	ju.mutation.SetExp(i)
	return ju
}

// AddExp adds i to the "exp" field.
func (ju *JobUpdate) AddExp(i int8) *JobUpdate {
	ju.mutation.AddExp(i)
	return ju
}

// SetArea sets the "area" field.
func (ju *JobUpdate) SetArea(s string) *JobUpdate {
	ju.mutation.SetArea(s)
	return ju
}

// SetCreateTime sets the "create_time" field.
func (ju *JobUpdate) SetCreateTime(t time.Time) *JobUpdate {
	ju.mutation.SetCreateTime(t)
	return ju
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ju *JobUpdate) SetNillableCreateTime(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetCreateTime(*t)
	}
	return ju
}

// SetUpdateTime sets the "update_time" field.
func (ju *JobUpdate) SetUpdateTime(t time.Time) *JobUpdate {
	ju.mutation.SetUpdateTime(t)
	return ju
}

// Mutation returns the JobMutation object of the builder.
func (ju *JobUpdate) Mutation() *JobMutation {
	return ju.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ju *JobUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ju.defaults()
	if len(ju.hooks) == 0 {
		if err = ju.check(); err != nil {
			return 0, err
		}
		affected, err = ju.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ju.check(); err != nil {
				return 0, err
			}
			ju.mutation = mutation
			affected, err = ju.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ju.hooks) - 1; i >= 0; i-- {
			if ju.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ju.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ju.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ju *JobUpdate) SaveX(ctx context.Context) int {
	affected, err := ju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ju *JobUpdate) Exec(ctx context.Context) error {
	_, err := ju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ju *JobUpdate) ExecX(ctx context.Context) {
	if err := ju.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ju *JobUpdate) defaults() {
	if _, ok := ju.mutation.UpdateTime(); !ok {
		v := job.UpdateDefaultUpdateTime()
		ju.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ju *JobUpdate) check() error {
	if v, ok := ju.mutation.JobName(); ok {
		if err := job.JobNameValidator(v); err != nil {
			return &ValidationError{Name: "job_name", err: fmt.Errorf(`ent: validator failed for field "Job.job_name": %w`, err)}
		}
	}
	if v, ok := ju.mutation.CompanyName(); ok {
		if err := job.CompanyNameValidator(v); err != nil {
			return &ValidationError{Name: "company_name", err: fmt.Errorf(`ent: validator failed for field "Job.company_name": %w`, err)}
		}
	}
	if v, ok := ju.mutation.Description(); ok {
		if err := job.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Job.description": %w`, err)}
		}
	}
	if v, ok := ju.mutation.Exp(); ok {
		if err := job.ExpValidator(v); err != nil {
			return &ValidationError{Name: "exp", err: fmt.Errorf(`ent: validator failed for field "Job.exp": %w`, err)}
		}
	}
	if v, ok := ju.mutation.Area(); ok {
		if err := job.AreaValidator(v); err != nil {
			return &ValidationError{Name: "area", err: fmt.Errorf(`ent: validator failed for field "Job.area": %w`, err)}
		}
	}
	return nil
}

func (ju *JobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   job.Table,
			Columns: job.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: job.FieldID,
			},
		},
	}
	if ps := ju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ju.mutation.JobName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldJobName,
		})
	}
	if value, ok := ju.mutation.CompanyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldCompanyName,
		})
	}
	if value, ok := ju.mutation.IsExist(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: job.FieldIsExist,
		})
	}
	if value, ok := ju.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldDescription,
		})
	}
	if value, ok := ju.mutation.IsRemote(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: job.FieldIsRemote,
		})
	}
	if value, ok := ju.mutation.Exp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: job.FieldExp,
		})
	}
	if value, ok := ju.mutation.AddedExp(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: job.FieldExp,
		})
	}
	if value, ok := ju.mutation.Area(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldArea,
		})
	}
	if value, ok := ju.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: job.FieldCreateTime,
		})
	}
	if value, ok := ju.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: job.FieldUpdateTime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// JobUpdateOne is the builder for updating a single Job entity.
type JobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobMutation
}

// SetJobName sets the "job_name" field.
func (juo *JobUpdateOne) SetJobName(s string) *JobUpdateOne {
	juo.mutation.SetJobName(s)
	return juo
}

// SetCompanyName sets the "company_name" field.
func (juo *JobUpdateOne) SetCompanyName(s string) *JobUpdateOne {
	juo.mutation.SetCompanyName(s)
	return juo
}

// SetIsExist sets the "is_exist" field.
func (juo *JobUpdateOne) SetIsExist(b bool) *JobUpdateOne {
	juo.mutation.SetIsExist(b)
	return juo
}

// SetNillableIsExist sets the "is_exist" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableIsExist(b *bool) *JobUpdateOne {
	if b != nil {
		juo.SetIsExist(*b)
	}
	return juo
}

// SetDescription sets the "description" field.
func (juo *JobUpdateOne) SetDescription(s string) *JobUpdateOne {
	juo.mutation.SetDescription(s)
	return juo
}

// SetIsRemote sets the "is_remote" field.
func (juo *JobUpdateOne) SetIsRemote(b bool) *JobUpdateOne {
	juo.mutation.SetIsRemote(b)
	return juo
}

// SetExp sets the "exp" field.
func (juo *JobUpdateOne) SetExp(i int8) *JobUpdateOne {
	juo.mutation.ResetExp()
	juo.mutation.SetExp(i)
	return juo
}

// AddExp adds i to the "exp" field.
func (juo *JobUpdateOne) AddExp(i int8) *JobUpdateOne {
	juo.mutation.AddExp(i)
	return juo
}

// SetArea sets the "area" field.
func (juo *JobUpdateOne) SetArea(s string) *JobUpdateOne {
	juo.mutation.SetArea(s)
	return juo
}

// SetCreateTime sets the "create_time" field.
func (juo *JobUpdateOne) SetCreateTime(t time.Time) *JobUpdateOne {
	juo.mutation.SetCreateTime(t)
	return juo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableCreateTime(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetCreateTime(*t)
	}
	return juo
}

// SetUpdateTime sets the "update_time" field.
func (juo *JobUpdateOne) SetUpdateTime(t time.Time) *JobUpdateOne {
	juo.mutation.SetUpdateTime(t)
	return juo
}

// Mutation returns the JobMutation object of the builder.
func (juo *JobUpdateOne) Mutation() *JobMutation {
	return juo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (juo *JobUpdateOne) Select(field string, fields ...string) *JobUpdateOne {
	juo.fields = append([]string{field}, fields...)
	return juo
}

// Save executes the query and returns the updated Job entity.
func (juo *JobUpdateOne) Save(ctx context.Context) (*Job, error) {
	var (
		err  error
		node *Job
	)
	juo.defaults()
	if len(juo.hooks) == 0 {
		if err = juo.check(); err != nil {
			return nil, err
		}
		node, err = juo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = juo.check(); err != nil {
				return nil, err
			}
			juo.mutation = mutation
			node, err = juo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(juo.hooks) - 1; i >= 0; i-- {
			if juo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = juo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, juo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Job)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from JobMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (juo *JobUpdateOne) SaveX(ctx context.Context) *Job {
	node, err := juo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (juo *JobUpdateOne) Exec(ctx context.Context) error {
	_, err := juo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (juo *JobUpdateOne) ExecX(ctx context.Context) {
	if err := juo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (juo *JobUpdateOne) defaults() {
	if _, ok := juo.mutation.UpdateTime(); !ok {
		v := job.UpdateDefaultUpdateTime()
		juo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (juo *JobUpdateOne) check() error {
	if v, ok := juo.mutation.JobName(); ok {
		if err := job.JobNameValidator(v); err != nil {
			return &ValidationError{Name: "job_name", err: fmt.Errorf(`ent: validator failed for field "Job.job_name": %w`, err)}
		}
	}
	if v, ok := juo.mutation.CompanyName(); ok {
		if err := job.CompanyNameValidator(v); err != nil {
			return &ValidationError{Name: "company_name", err: fmt.Errorf(`ent: validator failed for field "Job.company_name": %w`, err)}
		}
	}
	if v, ok := juo.mutation.Description(); ok {
		if err := job.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Job.description": %w`, err)}
		}
	}
	if v, ok := juo.mutation.Exp(); ok {
		if err := job.ExpValidator(v); err != nil {
			return &ValidationError{Name: "exp", err: fmt.Errorf(`ent: validator failed for field "Job.exp": %w`, err)}
		}
	}
	if v, ok := juo.mutation.Area(); ok {
		if err := job.AreaValidator(v); err != nil {
			return &ValidationError{Name: "area", err: fmt.Errorf(`ent: validator failed for field "Job.area": %w`, err)}
		}
	}
	return nil
}

func (juo *JobUpdateOne) sqlSave(ctx context.Context) (_node *Job, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   job.Table,
			Columns: job.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: job.FieldID,
			},
		},
	}
	id, ok := juo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Job.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := juo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, job.FieldID)
		for _, f := range fields {
			if !job.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != job.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := juo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := juo.mutation.JobName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldJobName,
		})
	}
	if value, ok := juo.mutation.CompanyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldCompanyName,
		})
	}
	if value, ok := juo.mutation.IsExist(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: job.FieldIsExist,
		})
	}
	if value, ok := juo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldDescription,
		})
	}
	if value, ok := juo.mutation.IsRemote(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: job.FieldIsRemote,
		})
	}
	if value, ok := juo.mutation.Exp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: job.FieldExp,
		})
	}
	if value, ok := juo.mutation.AddedExp(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: job.FieldExp,
		})
	}
	if value, ok := juo.mutation.Area(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldArea,
		})
	}
	if value, ok := juo.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: job.FieldCreateTime,
		})
	}
	if value, ok := juo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: job.FieldUpdateTime,
		})
	}
	_node = &Job{config: juo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, juo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
