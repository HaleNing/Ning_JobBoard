// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/HaleNing/Ning_JobBoard/src/Model/ent/job"
	"github.com/HaleNing/Ning_JobBoard/src/Model/ent/schema"
	"github.com/HaleNing/Ning_JobBoard/src/Model/ent/user"
	"github.com/HaleNing/Ning_JobBoard/src/Model/ent/user_info"
	"github.com/HaleNing/Ning_JobBoard/src/Model/ent/user_job"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	jobFields := schema.Job{}.Fields()
	_ = jobFields
	// jobDescJobName is the schema descriptor for job_name field.
	jobDescJobName := jobFields[0].Descriptor()
	// job.JobNameValidator is a validator for the "job_name" field. It is called by the builders before save.
	job.JobNameValidator = jobDescJobName.Validators[0].(func(string) error)
	// jobDescCompanyName is the schema descriptor for company_name field.
	jobDescCompanyName := jobFields[1].Descriptor()
	// job.CompanyNameValidator is a validator for the "company_name" field. It is called by the builders before save.
	job.CompanyNameValidator = jobDescCompanyName.Validators[0].(func(string) error)
	// jobDescIsExist is the schema descriptor for is_exist field.
	jobDescIsExist := jobFields[2].Descriptor()
	// job.DefaultIsExist holds the default value on creation for the is_exist field.
	job.DefaultIsExist = jobDescIsExist.Default.(bool)
	// jobDescDescription is the schema descriptor for description field.
	jobDescDescription := jobFields[3].Descriptor()
	// job.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	job.DescriptionValidator = jobDescDescription.Validators[0].(func(string) error)
	// jobDescExp is the schema descriptor for exp field.
	jobDescExp := jobFields[5].Descriptor()
	// job.ExpValidator is a validator for the "exp" field. It is called by the builders before save.
	job.ExpValidator = func() func(int8) error {
		validators := jobDescExp.Validators
		fns := [...]func(int8) error{
			validators[0].(func(int8) error),
			validators[1].(func(int8) error),
		}
		return func(exp int8) error {
			for _, fn := range fns {
				if err := fn(exp); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// jobDescArea is the schema descriptor for area field.
	jobDescArea := jobFields[6].Descriptor()
	// job.AreaValidator is a validator for the "area" field. It is called by the builders before save.
	job.AreaValidator = jobDescArea.Validators[0].(func(string) error)
	// jobDescCreateTime is the schema descriptor for create_time field.
	jobDescCreateTime := jobFields[7].Descriptor()
	// job.DefaultCreateTime holds the default value on creation for the create_time field.
	job.DefaultCreateTime = jobDescCreateTime.Default.(time.Time)
	// jobDescUpdateTime is the schema descriptor for update_time field.
	jobDescUpdateTime := jobFields[8].Descriptor()
	// job.DefaultUpdateTime holds the default value on creation for the update_time field.
	job.DefaultUpdateTime = jobDescUpdateTime.Default.(func() time.Time)
	// job.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	job.UpdateDefaultUpdateTime = jobDescUpdateTime.UpdateDefault.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescRole is the schema descriptor for role field.
	userDescRole := userFields[0].Descriptor()
	// user.DefaultRole holds the default value on creation for the role field.
	user.DefaultRole = userDescRole.Default.(int8)
	// userDescUserName is the schema descriptor for user_name field.
	userDescUserName := userFields[1].Descriptor()
	// user.UserNameValidator is a validator for the "user_name" field. It is called by the builders before save.
	user.UserNameValidator = func() func(string) error {
		validators := userDescUserName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(user_name string) error {
			for _, fn := range fns {
				if err := fn(user_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescIsExist is the schema descriptor for is_exist field.
	userDescIsExist := userFields[2].Descriptor()
	// user.DefaultIsExist holds the default value on creation for the is_exist field.
	user.DefaultIsExist = userDescIsExist.Default.(bool)
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userFields[3].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = userDescCreateTime.Default.(time.Time)
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userFields[4].Descriptor()
	// user.DefaultUpdateTime holds the default value on creation for the update_time field.
	user.DefaultUpdateTime = userDescUpdateTime.Default.(func() time.Time)
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() time.Time)
	user_infoFields := schema.User_info{}.Fields()
	_ = user_infoFields
	// user_infoDescUserName is the schema descriptor for user_name field.
	user_infoDescUserName := user_infoFields[0].Descriptor()
	// user_info.UserNameValidator is a validator for the "user_name" field. It is called by the builders before save.
	user_info.UserNameValidator = user_infoDescUserName.Validators[0].(func(string) error)
	// user_infoDescSalt is the schema descriptor for salt field.
	user_infoDescSalt := user_infoFields[1].Descriptor()
	// user_info.SaltValidator is a validator for the "salt" field. It is called by the builders before save.
	user_info.SaltValidator = user_infoDescSalt.Validators[0].(func(string) error)
	// user_infoDescPasswdHash is the schema descriptor for passwd_hash field.
	user_infoDescPasswdHash := user_infoFields[2].Descriptor()
	// user_info.PasswdHashValidator is a validator for the "passwd_hash" field. It is called by the builders before save.
	user_info.PasswdHashValidator = user_infoDescPasswdHash.Validators[0].(func(string) error)
	user_jobFields := schema.User_job{}.Fields()
	_ = user_jobFields
	// user_jobDescJobID is the schema descriptor for job_id field.
	user_jobDescJobID := user_jobFields[0].Descriptor()
	// user_job.JobIDValidator is a validator for the "job_id" field. It is called by the builders before save.
	user_job.JobIDValidator = user_jobDescJobID.Validators[0].(func(int64) error)
	// user_jobDescUserID is the schema descriptor for user_id field.
	user_jobDescUserID := user_jobFields[1].Descriptor()
	// user_job.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	user_job.UserIDValidator = user_jobDescUserID.Validators[0].(func(int64) error)
	// user_jobDescCreateTime is the schema descriptor for create_time field.
	user_jobDescCreateTime := user_jobFields[2].Descriptor()
	// user_job.DefaultCreateTime holds the default value on creation for the create_time field.
	user_job.DefaultCreateTime = user_jobDescCreateTime.Default.(time.Time)
	// user_jobDescUpdateTime is the schema descriptor for update_time field.
	user_jobDescUpdateTime := user_jobFields[3].Descriptor()
	// user_job.DefaultUpdateTime holds the default value on creation for the update_time field.
	user_job.DefaultUpdateTime = user_jobDescUpdateTime.Default.(func() time.Time)
	// user_job.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user_job.UpdateDefaultUpdateTime = user_jobDescUpdateTime.UpdateDefault.(func() time.Time)
}
