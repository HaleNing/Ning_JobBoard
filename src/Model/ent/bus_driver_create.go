// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/HaleNing/bustrack/src/Model/ent/bus_driver"
)

// BusDriverCreate is the builder for creating a Bus_driver entity.
type BusDriverCreate struct {
	config
	mutation *BusDriverMutation
	hooks    []Hook
}

// SetUserName sets the "user_name" field.
func (bdc *BusDriverCreate) SetUserName(s string) *BusDriverCreate {
	bdc.mutation.SetUserName(s)
	return bdc
}

// SetCreateTime sets the "create_time" field.
func (bdc *BusDriverCreate) SetCreateTime(t time.Time) *BusDriverCreate {
	bdc.mutation.SetCreateTime(t)
	return bdc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (bdc *BusDriverCreate) SetNillableCreateTime(t *time.Time) *BusDriverCreate {
	if t != nil {
		bdc.SetCreateTime(*t)
	}
	return bdc
}

// SetUpdateTime sets the "update_time" field.
func (bdc *BusDriverCreate) SetUpdateTime(t time.Time) *BusDriverCreate {
	bdc.mutation.SetUpdateTime(t)
	return bdc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (bdc *BusDriverCreate) SetNillableUpdateTime(t *time.Time) *BusDriverCreate {
	if t != nil {
		bdc.SetUpdateTime(*t)
	}
	return bdc
}

// SetIsDelete sets the "is_delete" field.
func (bdc *BusDriverCreate) SetIsDelete(i int8) *BusDriverCreate {
	bdc.mutation.SetIsDelete(i)
	return bdc
}

// SetNillableIsDelete sets the "is_delete" field if the given value is not nil.
func (bdc *BusDriverCreate) SetNillableIsDelete(i *int8) *BusDriverCreate {
	if i != nil {
		bdc.SetIsDelete(*i)
	}
	return bdc
}

// SetUserAge sets the "user_age" field.
func (bdc *BusDriverCreate) SetUserAge(i int8) *BusDriverCreate {
	bdc.mutation.SetUserAge(i)
	return bdc
}

// SetSex sets the "sex" field.
func (bdc *BusDriverCreate) SetSex(b bool) *BusDriverCreate {
	bdc.mutation.SetSex(b)
	return bdc
}

// SetCareerAge sets the "career_age" field.
func (bdc *BusDriverCreate) SetCareerAge(i int8) *BusDriverCreate {
	bdc.mutation.SetCareerAge(i)
	return bdc
}

// SetID sets the "id" field.
func (bdc *BusDriverCreate) SetID(i int64) *BusDriverCreate {
	bdc.mutation.SetID(i)
	return bdc
}

// Mutation returns the BusDriverMutation object of the builder.
func (bdc *BusDriverCreate) Mutation() *BusDriverMutation {
	return bdc.mutation
}

// Save creates the Bus_driver in the database.
func (bdc *BusDriverCreate) Save(ctx context.Context) (*Bus_driver, error) {
	var (
		err  error
		node *Bus_driver
	)
	bdc.defaults()
	if len(bdc.hooks) == 0 {
		if err = bdc.check(); err != nil {
			return nil, err
		}
		node, err = bdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BusDriverMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bdc.check(); err != nil {
				return nil, err
			}
			bdc.mutation = mutation
			if node, err = bdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bdc.hooks) - 1; i >= 0; i-- {
			if bdc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bdc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, bdc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Bus_driver)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BusDriverMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bdc *BusDriverCreate) SaveX(ctx context.Context) *Bus_driver {
	v, err := bdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bdc *BusDriverCreate) Exec(ctx context.Context) error {
	_, err := bdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bdc *BusDriverCreate) ExecX(ctx context.Context) {
	if err := bdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bdc *BusDriverCreate) defaults() {
	if _, ok := bdc.mutation.CreateTime(); !ok {
		v := bus_driver.DefaultCreateTime
		bdc.mutation.SetCreateTime(v)
	}
	if _, ok := bdc.mutation.UpdateTime(); !ok {
		v := bus_driver.DefaultUpdateTime
		bdc.mutation.SetUpdateTime(v)
	}
	if _, ok := bdc.mutation.IsDelete(); !ok {
		v := bus_driver.DefaultIsDelete
		bdc.mutation.SetIsDelete(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bdc *BusDriverCreate) check() error {
	if _, ok := bdc.mutation.UserName(); !ok {
		return &ValidationError{Name: "user_name", err: errors.New(`ent: missing required field "Bus_driver.user_name"`)}
	}
	if v, ok := bdc.mutation.UserName(); ok {
		if err := bus_driver.UserNameValidator(v); err != nil {
			return &ValidationError{Name: "user_name", err: fmt.Errorf(`ent: validator failed for field "Bus_driver.user_name": %w`, err)}
		}
	}
	if _, ok := bdc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Bus_driver.create_time"`)}
	}
	if _, ok := bdc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Bus_driver.update_time"`)}
	}
	if _, ok := bdc.mutation.IsDelete(); !ok {
		return &ValidationError{Name: "is_delete", err: errors.New(`ent: missing required field "Bus_driver.is_delete"`)}
	}
	if _, ok := bdc.mutation.UserAge(); !ok {
		return &ValidationError{Name: "user_age", err: errors.New(`ent: missing required field "Bus_driver.user_age"`)}
	}
	if v, ok := bdc.mutation.UserAge(); ok {
		if err := bus_driver.UserAgeValidator(v); err != nil {
			return &ValidationError{Name: "user_age", err: fmt.Errorf(`ent: validator failed for field "Bus_driver.user_age": %w`, err)}
		}
	}
	if _, ok := bdc.mutation.Sex(); !ok {
		return &ValidationError{Name: "sex", err: errors.New(`ent: missing required field "Bus_driver.sex"`)}
	}
	if _, ok := bdc.mutation.CareerAge(); !ok {
		return &ValidationError{Name: "career_age", err: errors.New(`ent: missing required field "Bus_driver.career_age"`)}
	}
	if v, ok := bdc.mutation.CareerAge(); ok {
		if err := bus_driver.CareerAgeValidator(v); err != nil {
			return &ValidationError{Name: "career_age", err: fmt.Errorf(`ent: validator failed for field "Bus_driver.career_age": %w`, err)}
		}
	}
	return nil
}

func (bdc *BusDriverCreate) sqlSave(ctx context.Context) (*Bus_driver, error) {
	_node, _spec := bdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (bdc *BusDriverCreate) createSpec() (*Bus_driver, *sqlgraph.CreateSpec) {
	var (
		_node = &Bus_driver{config: bdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: bus_driver.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: bus_driver.FieldID,
			},
		}
	)
	if id, ok := bdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bdc.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bus_driver.FieldUserName,
		})
		_node.UserName = value
	}
	if value, ok := bdc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bus_driver.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := bdc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bus_driver.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := bdc.mutation.IsDelete(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: bus_driver.FieldIsDelete,
		})
		_node.IsDelete = value
	}
	if value, ok := bdc.mutation.UserAge(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: bus_driver.FieldUserAge,
		})
		_node.UserAge = value
	}
	if value, ok := bdc.mutation.Sex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: bus_driver.FieldSex,
		})
		_node.Sex = value
	}
	if value, ok := bdc.mutation.CareerAge(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: bus_driver.FieldCareerAge,
		})
		_node.CareerAge = value
	}
	return _node, _spec
}

// BusDriverCreateBulk is the builder for creating many Bus_driver entities in bulk.
type BusDriverCreateBulk struct {
	config
	builders []*BusDriverCreate
}

// Save creates the Bus_driver entities in the database.
func (bdcb *BusDriverCreateBulk) Save(ctx context.Context) ([]*Bus_driver, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bdcb.builders))
	nodes := make([]*Bus_driver, len(bdcb.builders))
	mutators := make([]Mutator, len(bdcb.builders))
	for i := range bdcb.builders {
		func(i int, root context.Context) {
			builder := bdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BusDriverMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bdcb *BusDriverCreateBulk) SaveX(ctx context.Context) []*Bus_driver {
	v, err := bdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bdcb *BusDriverCreateBulk) Exec(ctx context.Context) error {
	_, err := bdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bdcb *BusDriverCreateBulk) ExecX(ctx context.Context) {
	if err := bdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
