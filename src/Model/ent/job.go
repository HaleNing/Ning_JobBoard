// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/HaleNing/Ning_JobBoard/src/Model/ent/job"
)

// Job is the model entity for the Job schema.
type Job struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// job name
	JobName string `json:"job_name,omitempty"`
	// company name
	CompanyName string `json:"company_name,omitempty"`
	// delete or not
	IsExist bool `json:"is_exist,omitempty"`
	// job desc
	Description string `json:"description,omitempty"`
	// job is remote or not
	IsRemote bool `json:"is_remote,omitempty"`
	// job exp
	Exp int8 `json:"exp,omitempty"`
	// job area
	Area string `json:"area,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Job) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case job.FieldIsExist, job.FieldIsRemote:
			values[i] = new(sql.NullBool)
		case job.FieldID, job.FieldExp:
			values[i] = new(sql.NullInt64)
		case job.FieldJobName, job.FieldCompanyName, job.FieldDescription, job.FieldArea:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Job", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Job fields.
func (j *Job) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case job.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			j.ID = int(value.Int64)
		case job.FieldJobName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_name", values[i])
			} else if value.Valid {
				j.JobName = value.String
			}
		case job.FieldCompanyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company_name", values[i])
			} else if value.Valid {
				j.CompanyName = value.String
			}
		case job.FieldIsExist:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_exist", values[i])
			} else if value.Valid {
				j.IsExist = value.Bool
			}
		case job.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				j.Description = value.String
			}
		case job.FieldIsRemote:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_remote", values[i])
			} else if value.Valid {
				j.IsRemote = value.Bool
			}
		case job.FieldExp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exp", values[i])
			} else if value.Valid {
				j.Exp = int8(value.Int64)
			}
		case job.FieldArea:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field area", values[i])
			} else if value.Valid {
				j.Area = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Job.
// Note that you need to call Job.Unwrap() before calling this method if this Job
// was returned from a transaction, and the transaction was committed or rolled back.
func (j *Job) Update() *JobUpdateOne {
	return (&JobClient{config: j.config}).UpdateOne(j)
}

// Unwrap unwraps the Job entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (j *Job) Unwrap() *Job {
	_tx, ok := j.config.driver.(*txDriver)
	if !ok {
		panic("ent: Job is not a transactional entity")
	}
	j.config.driver = _tx.drv
	return j
}

// String implements the fmt.Stringer.
func (j *Job) String() string {
	var builder strings.Builder
	builder.WriteString("Job(")
	builder.WriteString(fmt.Sprintf("id=%v, ", j.ID))
	builder.WriteString("job_name=")
	builder.WriteString(j.JobName)
	builder.WriteString(", ")
	builder.WriteString("company_name=")
	builder.WriteString(j.CompanyName)
	builder.WriteString(", ")
	builder.WriteString("is_exist=")
	builder.WriteString(fmt.Sprintf("%v", j.IsExist))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(j.Description)
	builder.WriteString(", ")
	builder.WriteString("is_remote=")
	builder.WriteString(fmt.Sprintf("%v", j.IsRemote))
	builder.WriteString(", ")
	builder.WriteString("exp=")
	builder.WriteString(fmt.Sprintf("%v", j.Exp))
	builder.WriteString(", ")
	builder.WriteString("area=")
	builder.WriteString(j.Area)
	builder.WriteByte(')')
	return builder.String()
}

// Jobs is a parsable slice of Job.
type Jobs []*Job

func (j Jobs) config(cfg config) {
	for _i := range j {
		j[_i].config = cfg
	}
}
